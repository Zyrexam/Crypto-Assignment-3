import requests
from collections import Counter

def get_challenge():
    response = requests.get("http://localhost:5000/challenge")
    return bytes.fromhex(response.json()["challenge"])

def decrypt(ciphertext):
    response = requests.post("http://localhost:5000/decrypt", json={"ciphertext": ciphertext.hex()})
    return bytes.fromhex(response.json()["plaintext"])

def verify(plaintext):
    response = requests.post("http://localhost:5000/verify", json={"plaintext": plaintext.hex()})
    return response.json()["response"]

def recover_plaintext(ciphertext, attempts=500):
    decrypted_results = []
    
    for _ in range(attempts):
        decrypted_results.append(decrypt(ciphertext))
    
    recovered_plaintext = bytearray(len(decrypted_results[0]))
    
    for i in range(len(recovered_plaintext)):
        byte_counts = Counter(block[i] for block in decrypted_results)
        recovered_plaintext[i] = byte_counts.most_common(1)[0][0]  # Most frequent byte
    
    return bytes(recovered_plaintext)

def exploit():
    challenge_ct = get_challenge()
    print("Challenge Ciphertext:", challenge_ct.hex())
    
    recovered_pt = recover_plaintext(challenge_ct)
    print("Recovered Plaintext:", recovered_pt.hex())
    
    flag = verify(recovered_pt)
    print("Recovered string.txt content:", flag)

if __name__ == "__main__":
    exploit()
