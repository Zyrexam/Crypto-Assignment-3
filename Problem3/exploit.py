import requests
import logging

logging.basicConfig(level=logging.INFO)
SERVER_URL = "http://localhost:5000"

class ExploitClient:
    def __init__(self):
        pass

    def encrypt(self, command):
        """Request encryption from the server."""
        response = requests.post(f"{SERVER_URL}/encrypt", json={"command": command})
        return response.json().get("encrypted")

    def run(self, encrypted_hex):
        """Run an encrypted command via the server."""
        response = requests.post(f"{SERVER_URL}/run", json={"encrypted_hex": encrypted_hex})
        return response.json().get("output")

    def bit_flip(self, encrypted_hex, position, bit):
        """Modify a single bit in the encrypted command."""
        response = requests.post(f"{SERVER_URL}/bitflip", json={
            "encrypted_hex": encrypted_hex, "position": position, "bit": bit
        })
        return response.json().get("modified")

    def byte_xor(self, encrypted_hex, position, value):
        """XOR a byte at a given position."""
        response = requests.post(f"{SERVER_URL}/bytexor", json={
            "encrypted_hex": encrypted_hex, "position": position, "value": value
        })
        return response.json().get("modified")

    def exploit(self):
        """Conduct the attack to find and read string.txt."""
        logging.info("Starting the exploit...")

        # Step 1: Directly try reading the file
        secret_file = "Secret/string.txt"
        echo_enc = self.encrypt(f"echo {secret_file}")
        file_contents = self.run(echo_enc)

        if "won't run that" in file_contents:
            logging.info("Attempting to modify command via bit flipping...")

            # Attempt bit flipping to turn "echo" into "cat"
            for byte_pos in range(len(bytes.fromhex(echo_enc))):
                for bit_pos in range(8):
                    modified_enc = self.bit_flip(echo_enc, byte_pos, bit_pos)
                    file_contents = self.run(modified_enc)

                    if "won't run that" not in file_contents and len(file_contents) > 0:
                        logging.info(f"Successfully modified command to read file: {file_contents}")
                        print(f"Secret content: {file_contents}")
                        return

        logging.info(f"File content: {file_contents}")

if __name__ == "__main__":
    exploit_client = ExploitClient()
    exploit_client.exploit()
